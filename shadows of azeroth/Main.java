import buildings.Alchemist;
import buildings.WarriorTower;
import maps.Map;
import entities.Player;
import other_things.Diologies;
import java.util.Scanner;
import other_things.Quests;
import other_things.BossBattle;
import java.util.List;
import entities.Enemy;
import maps.BattleMap;
import save.SaveManager;
import maps.Cell;
import time.GameTime;
import buildings.Totem;
import java.util.logging.Logger;

public class Main {
    private static final Logger logger = Logger.getLogger(Main.class.getName());
    public static void main(String[] args) {
        Scanner inputScanner = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ");
        String username = inputScanner.nextLine();

        Player player = new Player(0, 2);
        player.setUsername(username);
        GameTime gameTime = new GameTime();
        Diologies dialogs = new Diologies();
        Quests quests = new Quests(inputScanner);
        BossBattle bossBattle = new BossBattle();
        Totem totem = new Totem(gameTime);
        Alchemist alchemist = new Alchemist(gameTime);
        WarriorTower tower = new WarriorTower(gameTime);
        boolean gameOver = false;



        // –ü–æ–∫–∞–∑ —Ä–µ–∫–æ—Ä–¥–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        SaveManager.showTopRecords();

        // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã
        System.out.println("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã:");
        System.out.println("1 - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É (—Ä–µ–¥–∞–∫—Ç–æ—Ä)");
        System.out.println("2 - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–∞—Ä—Ç—É");
        System.out.println("3 - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ");
        System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");
        String mapChoice = inputScanner.nextLine().trim();

        Map map = null;

        if ("1".equals(mapChoice)) {
            map = new Map(); // –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            runMapEditor(map, player);
        } else if ("2".equals(mapChoice)) {
            map = new Map(); // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
            System.out.println("–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞.");
        } else if ("3".equals(mapChoice)) {
            System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (1, 2, 3):");
            String slot = inputScanner.nextLine().trim();
            map = new Map();
            if (!SaveManager.loadGame(player, map, dialogs, quests, bossBattle, slot)) {
                System.out.println("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É...");
                map = new Map(); // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
            }
        } else {
            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.");

            return;
        }


        Scanner gameScanner = new Scanner(System.in);

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É
        map.setPlayer(player);

        // –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        dialogs.displayProlog();
        map.displayCurrentMap(player);
        // –∑–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        gameTime.start();

        while (!gameOver) {
            System.out.println("\n–£–ø—Ä–∞–≤–ª—è–π: w/a/s/d (—Ö–æ–¥), 1 (–∞—Ç–∞–∫–∞), 2 (—Å–ø–ª–µ—à), p (—Å–æ—Å—Ç–æ—è–Ω–∏–µ), save (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å), load (–∑–∞–≥—Ä—É–∑–∏—Ç—å), records (—Ä–µ–∫–æ—Ä–¥—ã)");
            String input = gameScanner.nextLine().toLowerCase();

            switch (input) {
                case "save":
                    System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç (1, 2, 3):");
                    String slot = gameScanner.nextLine().trim();
                    SaveManager.saveGame(player, map, dialogs, quests, bossBattle, slot);
                    break;

                case "load":
                    System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç (1, 2, 3):");
                    slot = gameScanner.nextLine().trim();
                    if (SaveManager.loadGame(player, map, dialogs, quests, bossBattle, slot)) {
                        map.displayCurrentMap(player);
                    }
                    break;

                case "records":
                    SaveManager.showTopRecords();
                    break;

                // –í Main.java
                case "w", "a", "s", "d":
                    int dx = input.equals("w") ? -1 : input.equals("s") ? 1 : 0;
                    int dy = input.equals("a") ? -1 : input.equals("d") ? 1 : 0;
                    if (player.playerMove(dx, dy, map)) {
                        map.displayCurrentMap(player); // –î–æ–±–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã
                        checkEvents(player, dialogs, map, gameScanner, quests, bossBattle,totem,alchemist,tower);
                    } else {
                        System.out.println("–î–≤–∏–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!");
                        map.displayCurrentMap(player); // –î–æ–±–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã
                    }
                    break;

                case "p":
                    player.player_condition();
                    System.out.println("–í–´–ü–ò–¢–¨ –ó–ï–õ–¨–ï? 1 - –∑–¥–æ—Ä–æ–≤—å—è; 2-–∞—Ç–∞–∫–∏");
                    String potions = gameScanner.nextLine().toLowerCase();
                    if (potions.equals("1")) {
                        player.setHealth(player.getHealth() + 50);
                        player.setHealingPotion(player.getHealingPotion() - 1);
                        map.displayCurrentMap(player);
                    } else if (potions.equals("2")) {
                        player.setDmg(player.getDmg() + 25);
                        player.setBoostDmgPotion(player.getBoostDmgPotion() - 1);
                        map.displayCurrentMap(player);
                    } else {
                        map.displayCurrentMap(player);
                    }
                    break;

                default:
                    System.out.println("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!");
            }

            // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if (bossBattle.isWonLich() == 0) {
                int reward = player.getCoins() + 100; // –ü—Ä–∏–º–µ—Ä –ø–æ–¥—Å—á—ë—Ç–∞
                SaveManager.updateRecords(player);
                System.out.println("–õ–∏—á –ø–æ–≤–µ—Ä–∂–µ–Ω! –¢—ã —Å–ø–∞—Å –û—Ä–¥—É!");
                gameOver = true;
            } else if (bossBattle.isWonLich() == 1 || player.getHealth() <= 0) {
                System.out.println("–¢—ã –ø–∞–ª –≤ –±–æ—é... –û—Ä–¥–∞ —Å–∫–æ—Ä–±–∏—Ç.");
                gameOver = true;
            }
        }

        gameScanner.close();
    }

    // –†–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ä—Ç—ã
    private static void runMapEditor(Map map, Player player) {
        Scanner editorScanner = new Scanner(System.in);
        boolean editing = true;

        System.out.println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ä—Ç—ã OGRE_LANDS!");
        System.out.println("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É, –≤–≤–æ–¥—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –∏ Y.");
        int size = map.getCurrentMapMaxX(Player.MapType.OGRE_LANDS);

        Cell[][] editorMap = new Cell[size][size];
        for (int x = 0; x < size; x++) {
            for (int y = 0; y < size; y++) {
                editorMap[x][y] = new Cell("\uD83C\uDF32"); // –õ–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
        }

        String[] elements = {
                "\uD83E\uDDCC", // –¢—Ä–∞–ª–ª
                "üõí",            // –ú–∞–≥–∞–∑–∏–Ω
                "‚öí\uFE0F",     // –ö—É–∑–Ω–µ—Ü
                "\uD83D\uDC38", // –õ—è–≥—É—à–∫–∞
                "\uD83D\uDD25", // –ö–æ—Å—Ç—ë—Ä
                "\uD83C\uDFD5\uFE0F", // –ü–∞–ª–∞—Ç–∫–∞
                "\uD83D\uDFE8",  // –î–æ—Ä–æ–≥–∞
                "\uD80C\uDE78",
                "\uD83C\uDF0C"
        };

        String[] elementNames = {
                "–¢—Ä–∞–ª–ª",
                "–ú–∞–≥–∞–∑–∏–Ω",
                "–ö—É–∑–Ω–µ—Ü",
                "–õ—è–≥—É—à–∫–∞",
                "–ö–æ—Å—Ç—ë—Ä",
                "–ü–∞–ª–∞—Ç–∫–∞",
                "–î–æ—Ä–æ–≥–∞",
                "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É",
                "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞—Ä—Ç—É —Ä—É–∏–Ω"
        };

        for (int i = 0; i < elements.length; i++) {
            boolean placed = false;
            while (!placed) {
                drawEditorMap(editorMap);
                System.out.println("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ " + elementNames[i]);
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É X: ");
                int x = -1;
                try {
                    x = Integer.parseInt(editorScanner.nextLine());
                } catch (NumberFormatException e) {
                    System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    continue;
                }

                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y: ");
                int y = -1;
                try {
                    y = Integer.parseInt(editorScanner.nextLine());
                } catch (NumberFormatException e) {
                    System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    continue;
                }

                if (x >= 0 && x < size && y >= 0 && y < size) {
                    if (!editorMap[x][y].getCelltype().equals("\uD83C\uDF32")) {
                        System.out.println("–≠—Ç–∞ —è—á–µ–π–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.");
                        continue;
                    }
                    editorMap[x][y].setCelltype(elements[i]);
                    System.out.println(elementNames[i] + " —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ (" + x + ", " + y + ").");
                    placed = true;
                } else {
                    System.out.println("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.");
                }
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç Map
        for (int x = 0; x < size; x++) {
            for (int y = 0; y < size; y++) {
                map.getCurrentMapGrid(Player.MapType.OGRE_LANDS)[x][y].setCelltype(editorMap[x][y].getCelltype());
            }
        }

        System.out.println("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
        player.setCurrentMapType(Player.MapType.OGRE_LANDS);
        player.setPosition(0, 0);
        map.displayCurrentMap(player);
    }

    // –ú–µ—Ç–æ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    private static void drawEditorMap(Cell[][] map) {
        int size = map.length;
        for (int x = 0; x < size; x++) {
            for (int y = 0; y < size; y++) {
                System.out.print(" " + map[x][y].getCelltype() + " ");
            }
            System.out.println();
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π
    private static void checkEvents(Player player, Diologies dialogs, Map map, Scanner scanner, Quests quests, BossBattle battle, Totem totem, Alchemist alchemist, WarriorTower tower) {
        Cell[][] currentGrid = map.getCurrentMapGrid(player.getCurrentMapType());
        int x = player.getX();
        int y = player.getY();

        if (x < 0 || y < 0 || x >= currentGrid.length || y >= currentGrid[0].length) return;

        String cellType = currentGrid[x][y].getCelltype();

        switch (player.getCurrentMapType()) {
            case OGRE_LANDS:
                if (cellType.equals("\uD83E\uDDCC")) { // –¢—Ä–∞–ª–ª
                    handleThrallDialog(dialogs, map, scanner, player);
                } else if (cellType.equals("‚öí\uFE0F")) { // –ö—É–∑–Ω–µ—Ü
                    handleSmithDialog(dialogs, map, scanner, player);
                } else if (cellType.equals("üõí")) { // –ú–∞–≥–∞–∑–∏–Ω
                    handleShop(map, player, scanner);
                } else if(cellType.equals("\uD83D\uDDFF")) {
                    totem.interact(player, map);
                } else if(cellType.equals("\uD83E\uDDEA")) {
                    alchemist.interact(player,map);
                }
                 else if(cellType.equals("\uD83C\uDFEF")) {
                tower.interact(player,map);
                }




        break;

            case RUINS:
                if (cellType.equals("\uD83D\uDD2E")) { // –ó–∞–≥–∞–¥–∫–∞
                    System.out.println("–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç? (1 - –¥–∞, 2 - –Ω–µ—Ç)");
                    String choice = scanner.nextLine();
                    if ("1".equals(choice)) {
                        boolean completed = quests.startFirstQuest(player, map);
                        if (!completed) {
                            System.out.println("–î—É—Ö–∏ –Ω–∞–ø–∞–ª–∏! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –±–æ–π...");
                            List<Enemy> spirits = List.of(
                                    new Enemy("–î—É—Ö 1", 30, 5),
                                    new Enemy("–î—É—Ö 2", 30, 5),
                                    new Enemy("–î—É—Ö 3", 30, 5)
                            );
                            new BattleMap(map, player, spirits, "üëª").runBattle();
                            int reward = 20;
                            player.addCoins(reward);
                            System.out.println("–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –¥—É—Ö–æ–≤ –∏ –ø–æ–ª—É—á–∏–ª–∏ " + reward + " –º–æ–Ω–µ—Ç! –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: " + player.getCoins());
                            player.setCurrentMapType(Player.MapType.OGRE_LANDS);
                            map.displayCurrentMap(player);
                        } else {
                            int reward = 50;
                            player.addCoins(reward);
                            System.out.println("–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–∏–ª–∏ –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ " + reward + " –º–æ–Ω–µ—Ç! –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: " + player.getCoins());
                        }
                    }
                }
                break;

            case FROZEN_MAP:
                if (cellType.equals("\uD83E\uDDB9")) { // –ë–æ—Å—Å
                    battle.startBattle(player);
                    map.displayCurrentMap(player);
                } else if (cellType.equals("\uD83D\uDC3E")) { // –ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫
                    System.out.println("–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫–∏ –õ–∏—á–∞ –ø—Ä–µ–≥—Ä–∞–∂–¥–∞—é—Ç –ø—É—Ç—å! –ë–∏—Ç–≤–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...");
                    List<Enemy> minions = List.of(
                            new Enemy("–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ 1", 40, 10),
                            new Enemy("–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ 2", 40, 10),
                            new Enemy("–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ 3", 40, 10)
                    );
                    new BattleMap(map, player, minions, "\uD83D\uDC80").runBattle();
                    int reward = 30;
                    player.addCoins(reward);
                    System.out.println("–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –ø—Ä–∏—Å–ø–µ—à–Ω–∏–∫–æ–≤ –∏ –ø–æ–ª—É—á–∏–ª–∏ " + reward + " –º–æ–Ω–µ—Ç! –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: " + player.getCoins());
                    player.setCurrentMapType(Player.MapType.FROZEN_MAP);
                    map.displayCurrentMap(player);
                }
                break;


        }

        handleMapTransition(scanner, map, player);
    }


    // –î–∏–∞–ª–æ–≥ —Å —Ç—Ä–∞–ª–ª–æ–º
    private static void handleThrallDialog(Diologies dialogs, Map map, Scanner scanner, Player player) {
        boolean dialogActive = true;
        while (dialogActive) {
            String currentDialog = dialogs.getThrallDialog();
            System.out.println(currentDialog);
            String input = scanner.nextLine().toLowerCase();
            if (input.equals("e")) {
                dialogActive = false;
                map.displayCurrentMap(player);
                if (dialogs.canProgressThrallDialog()) {
                    dialogs.moveToNextThrallStage();
                }
                if (dialogs.getThrallStage() == 0)
                {
                    dialogs.setThrallStage(1);
                }
            } else {
                System.out.println("–û—Ä–¥–∞ –Ω–µ–¥–æ–≤–æ–ª—å–Ω–∞ —Ç–≤–æ–µ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å—é...");
            }
        }
    }

    // –î–∏–∞–ª–æ–≥ —Å –∫—É–∑–Ω–µ—Ü–æ–º
    private static void handleSmithDialog(Diologies dialogs, Map map, Scanner scanner, Player player) {
        boolean dialogActive = true;
        while (dialogActive) {
            String currentDialog = dialogs.getSmithDialog(player);
            System.out.println(currentDialog);
            String input = scanner.nextLine().toLowerCase();
            if (input.equals("e")) {
                dialogActive = false;
                map.displayCurrentMap(player);
                if (dialogs.canProgressSmithStory(player)) {
                    dialogs.moveToNextSmithStage(player);
                }
                if (dialogs.getSmithStage() == 0)
                {
                    dialogs.setSmithStage(1);
                }
            } else {
                System.out.println("–ö—É–∑–Ω–µ—Ü —Ö–º—É—Ä–∏—Ç—Å—è: –ü–æ–≤—Ç–æ—Ä–∏...");
            }
        }
    }

    // –ú–∞–≥–∞–∑–∏–Ω
    private static void handleShop(Map map, Player player, Scanner scanner) {
        boolean inShop = true;
        while (inShop) {

            System.out.println("–¢–æ—Ä–≥–æ–≤–µ—Ü –∑–µ–ª—å—è–º–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:");
            System.out.println("1) –ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è (+50 HP) ‚Äî 25 –º–æ–Ω–µ—Ç");
            System.out.println("2) –ó–µ–ª—å–µ —É—Ä–æ–Ω–∞ (+25 DMG) ‚Äî 50 –º–æ–Ω–µ—Ç");
            System.out.println("0) –£–π—Ç–∏");
            System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");
            String choice = scanner.nextLine().trim();

            switch (choice) {
                case "1":
                    if (player.getCoins() >= 25) {
                        int before = player.getCoins();
                        player.addCoins(-25);
                        player.setHealth(player.getHealth() + 50);
                        System.out.println("–í—ã –∫—É–ø–∏–ª–∏ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è! –ú–æ–Ω–µ—Ç –æ—Å—Ç–∞–ª–æ—Å—å: " + player.getCoins());

                        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
                        SaveManager.logPurchase(player.getUsername(), "–∑–¥–æ—Ä–æ–≤—å–µ", "—É—Å–ø–µ—à–Ω–æ", before, player.getCoins());
                    } else {
                        System.out.println("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");

                        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É
                        SaveManager.logPurchase(player.getUsername(), "–∑–¥–æ—Ä–æ–≤—å–µ", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç", player.getCoins(), player.getCoins());
                    }
                    map.displayCurrentMap(player);
                    break;

                case "2":
                    if (player.getCoins() >= 50) {
                        int before = player.getCoins();
                        player.addCoins(-50);
                        player.setDmg(player.getDmg() + 25);
                        System.out.println("–í—ã –∫—É–ø–∏–ª–∏ –∑–µ–ª—å–µ —É—Ä–æ–Ω–∞! –ú–æ–Ω–µ—Ç –æ—Å—Ç–∞–ª–æ—Å—å: " + player.getCoins());

                        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
                        SaveManager.logPurchase(player.getUsername(), "—Ö–∞–π–ø", "—É—Å–ø–µ—à–Ω–æ", before, player.getCoins());
                    } else {
                        System.out.println("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");

                        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É
                        SaveManager.logPurchase(player.getUsername(), "—Ö–∞–π–ø", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç", player.getCoins(), player.getCoins());
                    }
                    map.displayCurrentMap(player);
                    break;

                case "0":
                    inShop = false;
                    map.displayCurrentMap(player);
                    break;

                default:
                    System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                    SaveManager.logPurchase(player.getUsername(), "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä", player.getCoins(), player.getCoins());
            }
        }
    }

    // –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
    private static void handleMapTransition(Scanner scanner, Map map, Player player) {
        Cell[][] currentCell = map.getCurrentMapGrid(player.getCurrentMapType());
        String cellType = currentCell[player.getX()][player.getY()].getCelltype();

        switch (player.getCurrentMapType()) {
            case OGRE_LANDS:
                if (cellType.equals("\uD80C\uDE78")) {
                    transitionToMap(scanner, map, player, Player.MapType.RUINS, 0, 0);
                } else if (cellType.equals("\uD83C\uDF0C")) {
                    transitionToMap(scanner, map, player, Player.MapType.FROZEN_MAP, 0, 0);
                }
                break;

            case RUINS:
                if (player.getX() == 4 && player.getY() == 4) {
                    transitionToMap(scanner, map, player, Player.MapType.OGRE_LANDS, 2, 7);
                }
                break;

            case FROZEN_MAP:
                if (player.getX() == 0 && player.getY() == 5) {
                    transitionToMap(scanner, map, player, Player.MapType.OGRE_LANDS, 0, 5);
                }
                break;
        }
    }

    // –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É
    private static void transitionToMap(Scanner scanner, Map map, Player player, Player.MapType targetMap, int startX, int startY) {
        System.out.println("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É " + targetMap.name() + "? (1 - –¥–∞, 2 - –Ω–µ—Ç)");
        String choice = scanner.nextLine();
        if ("1".equals(choice)) {
            player.setCurrentMapType(targetMap);
            player.setPosition(startX, startY);
            map.displayCurrentMap(player);
        }
    }
}
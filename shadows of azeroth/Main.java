import maps.Map;
import entities.Player;
import other_things.Diologies;
import java.util.Scanner;
import other_things.Quests;
import other_things.BossBattle;
import java.util.List;
import entities.Enemy;
import maps.BattleMap;
import maps.Cell;

public class Main {

    public static void main(String[] args) {
        Scanner choiceScanner = new Scanner(System.in);
        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã:");
        System.out.println("1 - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É ");
        System.out.println("2 - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–∞—Ä—Ç—É");
        System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");

        String choice = choiceScanner.nextLine().trim();


        Map map = null;
        Player player = null;

        if ("1".equals(choice)) {
            map = new Map();
            player = new Player(0, 0);
            map.setPlayer(player);
            runMapEditor(map, player);
        } else if ("2".equals(choice)) {
            map = new Map();
            player = new Player(0, 0);
            map.setPlayer(player);
            System.out.println("–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞.");
        } else {
            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.");
            System.exit(0);
        }

        Diologies dialogs = new Diologies();
        Scanner scanner = new Scanner(System.in);
        Quests quests = new Quests(scanner);
        BossBattle bossBattle = new BossBattle();
        boolean gameOver = false;

        dialogs.displayProlog();
        map.displayCurrentMap(player);

        while (!gameOver) {
            System.out.println("–£–ø—Ä–∞–≤–ª—è–π: w/a/s/d (—Ö–æ–¥), 1 (–∞—Ç–∞–∫–∞ –º–µ—á–æ–º), 2 (—Å–ø–ª–µ—à), p (—Å–æ—Å—Ç–æ—è–Ω–∏–µ)");
            String input = scanner.nextLine().toLowerCase();

            switch (input) {
                case "w", "s", "a", "d":
                    int dx = input.equals("w") ? -1 : input.equals("s") ? 1 : 0;
                    int dy = input.equals("a") ? -1 : input.equals("d") ? 1 : 0;
                    if (player.playerMove(dx, dy, map)) {
                        map.displayCurrentMap(player);
                        checkEvents(player, dialogs, map, scanner, quests, bossBattle);
                    } else {
                        System.out.println("–î–≤–∏–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!");
                        map.displayCurrentMap(player);
                    }
                    break;

                case "p":
                    player.player_condition();
                    System.out.println("–í–´–ü–ò–¢–¨ –ó–ï–õ–¨–ï? 1 - –∑–¥–æ—Ä–æ–≤—å—è; 2-–∞—Ç–∞–∫–∏");
                    String potions = scanner.nextLine().toLowerCase();
                    if (potions.equals("1")) {
                        player.setHealth(player.getHealth() + 50);
                        player.setHealingPotion(player.getHealingPotion() - 1);
                        map.displayCurrentMap(player);
                    } else if (potions.equals("2")) {
                        player.setDmg(player.getDmg() + 25);
                        player.setBoostDmgPotion(player.getBoostDmgPotion() - 1);
                        map.displayCurrentMap(player);
                    } else {
                        map.displayCurrentMap(player);
                    }
                    break;

                default:
                    System.out.println("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!");
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
            if (bossBattle.isWonLich() == 0) {
                System.out.println("–õ–∏—á –ø–æ–≤–µ—Ä–∂–µ–Ω! –¢—ã —Å–ø–∞—Å –û—Ä–¥—É!");
                gameOver = true;
            } else if (bossBattle.isWonLich() == 1 || player.getHealth() <= 0) {
                System.out.println("–¢—ã –ø–∞–ª –≤ –±–æ—é... –û—Ä–¥–∞ —Å–∫–æ—Ä–±–∏—Ç.");
                gameOver = true;
            }
        }

        scanner.close();
    }

    private static void runMapEditor(Map map, Player player) {
        Scanner scanner = new Scanner(System.in);
        int size = map.getCurrentMapMaxY(Player.MapType.OGRE_LANDS);
        Cell[][] editorMap = new Cell[size][size];

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ª–µ—Å–æ–º
        for (int x = 0; x < size; x++) {
            for (int y = 0; y < size; y++) {
                editorMap[x][y] = new Cell("\uD83C\uDF32"); // –õ–µ—Å
            }
        }

        System.out.println("–ü–æ—á—É–≤—Å—Ç–≤—É–π —Å–µ–±—è –±–æ–≥–æ–º, –≤–ª–∞—Å—Ç–Ω—ã–º –Ω–∞–¥ –ª–∞–Ω–¥—à–∞–≤—Ç–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º!!!!");
        System.out.println("–ü–æ—Å—Ç–∞–≤—å –≤—Å–µ—Ö –ø—Ä–∏–∫–æ–ª–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É. –°–º–æ—Ç—Ä–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –∫–æ–ª–ª–∏–∑–∏–ª–∏—Å—å, –∏–Ω–∞—á–µ –¥—Ä—É–≥–∏–µ –±–æ–≥–∏ —Ç–µ–±—è –ø–æ–∫–∞—Ä–∞—é—Ç");
        System.out.println("–ö–∞—Ä—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–º " + size + "x" + size + ".");

        // –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        String[] elements = {
                "\uD83E\uDDCC", // –¢—Ä–∞–ª–ª
                "‚öí\uFE0F",     // –ö—É–∑–Ω–µ—Ü
                "üõí",            // –ú–∞–≥–∞–∑–∏–Ω
                "\uD80C\uDE78", // –ü–µ—Ä–µ—Ö–æ–¥ –≤ RUINS
                "\uD83C\uDF0C", // –ü–µ—Ä–µ—Ö–æ–¥ –≤ FROZEN_MAP
                "\uD83D\uDD25", // –ö–æ—Å—Ç–µ—Ä
                "\uD83C\uDFD5\uFE0F", // –ü–∞–ª–∞—Ç–∫–∞
                "\uD83D\uDC38"   // –õ—è–≥—É—à–∫–∞
        };

        String[] elementNames = {
                "–¢—Ä–∞–ª–ª",
                "–ö—É–∑–Ω–µ—Ü",
                "–ú–∞–≥–∞–∑–∏–Ω",
                "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –†—É–∏–Ω—ã",
                "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –õ–µ–¥—è–Ω—É—é –∑–æ–Ω—É",
                "–ö–æ—Å—Ç–µ—Ä",
                "–ü–∞–ª–∞—Ç–∫–∞",
                "–õ—è–≥—É—à–∫–∞"
        };

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏
        for (int i = 0; i < elements.length; i++) {
            boolean placed = false;

            while (!placed) {
                System.out.println("\n–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞:");
                drawEditorMap(editorMap);

                System.out.println("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ " + elementNames[i]);
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É X: ");
                int x = -1;
                try {
                    x = Integer.parseInt(scanner.nextLine());
                } catch (NumberFormatException e) {
                    System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    continue;
                }

                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y: ");
                int y = -1;
                try {
                    y = Integer.parseInt(scanner.nextLine());
                } catch (NumberFormatException e) {
                    System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    continue;
                }

                if (x >= 0 && x < size && y >= 0 && y < size) {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–Ω—è—Ç–∞ –ª–∏ —è—á–µ–π–∫–∞
                    if (!editorMap[x][y].getCelltype().equals("\uD83C\uDF32")) { // –õ–µ—Å
                        System.out.println("–≠—Ç–∞ —è—á–µ–π–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.");
                        continue;
                    }

                    editorMap[x][y].setCelltype(elements[i]);
                    System.out.println(elementNames[i] + " —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ (" + x + ", " + y + ").");
                    placed = true;
                } else {
                    System.out.println("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.");
                }
            }
        }

        // –ß—Ç–æ –ø–æ–Ω–∞—Å–æ–∑–¥–∞–≤–∞–ª–∏ —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–≤–∏–º –≤ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π map
        for (int x = 0; x < size; x++) {
            for (int y = 0; y < size; y++) {
                map.getCurrentMapGrid(Player.MapType.OGRE_LANDS)[x][y].setCelltype(editorMap[x][y].getCelltype());
            }
        }

        System.out.println("\n–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
        player.setCurrentMapType(Player.MapType.OGRE_LANDS);
        player.setPosition(0, 0); // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        map.displayCurrentMap(player);
    }

    private static void drawEditorMap(Cell[][] map) {
        int size = map.length;
        for (int x = 0; x < size; x++) {
            for (int y = 0; y < size; y++) {
                System.out.print(" " + map[x][y].getCelltype() + " ");
            }
            System.out.println();
        }
    }

    private static void checkEvents(Player player, Diologies dialogs, Map map, Scanner scanner, Quests quests, BossBattle battle) {
        Cell[][] currentGrid = map.getCurrentMapGrid(player.getCurrentMapType());
        int x = player.getX();
        int y = player.getY();

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if (x < 0 || y < 0 || x >= currentGrid.length || y >= currentGrid[0].length) {
            return;
        }

        String cellType = currentGrid[x][y].getCelltype();

        switch (player.getCurrentMapType()) {
            case OGRE_LANDS:
                if (cellType.equals("\uD83E\uDDCC")) { // –¢—Ä–∞–ª–ª üßô‚Äç‚ôÇÔ∏è
                    handleThrallDialog(dialogs, map, scanner, player);
                } else if (cellType.equals("‚öí\uFE0F")) { // –ö—É–∑–Ω–µ—Ü ‚öíÔ∏è
                    handleSmithDialog(dialogs, map, scanner, player);
                } else if (cellType.equals("üõí")) { // –ú–∞–≥–∞–∑–∏–Ω üõí
                    handleShop(map, player, scanner);
                }
                break;

            case RUINS:
                if (cellType.equals("\uD83D\uDD2E")) { // –ó–∞–≥–∞–¥–∫–∞ üí°
                    handleFirstQuest(quests, map, scanner, player);
                }
                break;

            case FROZEN_MAP:
                if (cellType.equals("\uD83E\uDDB9")) { // –ë–æ—Å—Å üßü‚Äç‚ôÇÔ∏è
                    battle.startBattle(player);
                    map.displayCurrentMap(player);
                } else if (cellType.equals("\uD83D\uDC3E")) { // –ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫–∏ üëπ
                    System.out.println("–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫–∏ –õ–∏—á–∞ –ø—Ä–µ–≥—Ä–∞–∂–¥–∞—é—Ç –ø—É—Ç—å! –ë–∏—Ç–≤–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...");
                    List<Enemy> minions = List.of(
                            new Enemy("–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ 1", 40, 10),
                            new Enemy("–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ 2", 40, 10),
                            new Enemy("–ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫ 3", 40, 10)
                    );
                    new BattleMap(map, player, minions, "\uD83D\uDC80").runBattle();
                    int rewardMinions = 30;
                    player.addCoins(rewardMinions);
                    System.out.println("–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –ø—Ä–∏—Å–ø–µ—à–Ω–∏–∫–æ–≤ –∏ –ø–æ–ª—É—á–∏–ª–∏ " + rewardMinions + " –º–æ–Ω–µ—Ç! –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: " + player.getCoins());
                    player.setCurrentMapType(Player.MapType.FROZEN_MAP);
                    player.setPosition(4,4);
                    map.displayCurrentMap(player);
                }
                break;
        }

        handleMapTransition(scanner, map, player);
    }

    private static void handleThrallDialog(Diologies dialogs, Map map, Scanner scanner, Player player) {
        boolean dialogActive = true;
        while (dialogActive) {
            String currentDialog = dialogs.getThrallDialog();
            System.out.println(currentDialog);
            String input = scanner.nextLine().toLowerCase();
            if (input.equals("e")) {
                dialogActive = false;
                map.displayCurrentMap(player);
                if (dialogs.canProgressThrallDialog()) {
                    dialogs.moveToNextThrallStage();
                }
                if (dialogs.getThrallStage() == 0) {
                    dialogs.setThrallStage(1);
                }
            } else {
                System.out.println("–û—Ä–¥–∞ –Ω–µ–¥–æ–≤–æ–ª—å–Ω–∞ —Ç–≤–æ–µ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å—é...");
            }
        }
    }

    private static void handleSmithDialog(Diologies dialogs, Map map, Scanner scanner, Player player) {
        boolean dialogActive = true;
        while (dialogActive) {
            String currentDialog = dialogs.getSmithDialog(player);
            System.out.println(currentDialog);
            String input = scanner.nextLine().toLowerCase();
            if (input.equals("e")) {
                dialogActive = false;
                map.displayCurrentMap(player);
                if (dialogs.canProgressSmithStory(player)) {
                    dialogs.moveToNextSmithStage(player);
                }
                if (dialogs.getSmithStage() == 0) {
                    dialogs.setSmithStage(1);
                }
            } else {
                System.out.println("–ö—É–∑–Ω–µ—Ü —Ö–º—É—Ä–∏—Ç—Å—è: –ü–æ–≤—Ç–æ—Ä–∏...");
            }
        }
    }

    private static void handleFirstQuest(Quests quests, Map map, Scanner scanner, Player player) {
        System.out.println("–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç? (1 - –¥–∞, 2 - –Ω–µ—Ç)");
        String choice = scanner.nextLine();
        if ("1".equals(choice)) {
            boolean completed = quests.startFirstQuest(player, map);
            if (!completed) {
                System.out.println("–î—É—Ö–∏ –Ω–∞–ø–∞–ª–∏! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –±–æ–π...");
                List<Enemy> spirits = List.of(
                        new Enemy("–î—É—Ö 1", 30, 5),
                        new Enemy("–î—É—Ö 2", 30, 5),
                        new Enemy("–î—É—Ö 3", 30, 5)
                );
                new BattleMap(map, player, spirits, "üëª").runBattle();
                int rewardSpirits = 20;
                player.addCoins(rewardSpirits);
                System.out.println("–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –¥—É—Ö–æ–≤ –∏ –ø–æ–ª—É—á–∏–ª–∏ " + rewardSpirits + " –º–æ–Ω–µ—Ç! –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: " + player.getCoins());
                player.setCurrentMapType(Player.MapType.OGRE_LANDS);
                map.setPlayer(player);
                map.displayCurrentMap(player);
            } else {
                int rewardRiddles = 50;
                player.addCoins(rewardRiddles);
                System.out.println("–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–∏–ª–∏ –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ " + rewardRiddles + " –º–æ–Ω–µ—Ç! –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: " + player.getCoins());
            }
        }
    }

    private static void handleMapTransition(Scanner scanner, Map map, Player player) {
        Cell[][] currentCell = map.getCurrentMapGrid(player.getCurrentMapType());
        String cellType = currentCell[player.getX()][player.getY()].getCelltype();

        switch (player.getCurrentMapType()) {
            case OGRE_LANDS:
                if (cellType.equals("\uD80C\uDE78")) {
                    transitionToMap(scanner, map, player, Player.MapType.RUINS, 0, 0);
                } else if (cellType.equals("\uD83C\uDF0C")) {
                    transitionToMap(scanner, map, player, Player.MapType.FROZEN_MAP, 0, 0);
                }
                break;

            case RUINS:
                if (cellType.equals("\uD80C\uDE78")) {
                    transitionToMap(scanner, map, player, Player.MapType.OGRE_LANDS, 2, 7);
                }
                break;

            case FROZEN_MAP:
                if (cellType.equals("\uD83C\uDF0C")) {
                    transitionToMap(scanner, map, player, Player.MapType.OGRE_LANDS, 0, 5);
                }
                break;
        }
    }

    private static void handleShop(Map map, Player player, Scanner scanner) {
        boolean inShop = true;
        while (inShop) {
            map.displayCurrentMap(player);
            System.out.println("–¢–æ—Ä–≥–æ–≤–µ—Ü –∑–µ–ª—å—è–º–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:");
            System.out.println("1) –ó–µ–ª—å–µ —Å–≤–∞–≥–∏ (+50 HP) ‚Äî 25 –º–æ–Ω–µ—Ç");
            System.out.println("2) –ó–µ–ª—å–µ —Ö–∞–π–ø–∞ (+25 —É—Ä–æ–Ω–∞) ‚Äî 50 –º–æ–Ω–µ—Ç");
            System.out.println("0) –£–π—Ç–∏");
            System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");
            String choice = scanner.nextLine().trim();

            switch (choice) {
                case "1":
                    if (player.getCoins() >= 25) {
                        player.addCoins(-25);
                        player.setHealth(player.getHealth() + 50);
                        System.out.println("–í—ã –∫—É–ø–∏–ª–∏ –∑–µ–ª—å–µ —Å–≤–∞–≥–∏! –ú–æ–Ω–µ—Ç –æ—Å—Ç–∞–ª–æ—Å—å: " + player.getCoins());
                    } else {
                        System.out.println("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
                    }
                    break;

                case "2":
                    if (player.getCoins() >= 50) {
                        player.addCoins(-50);
                        player.setDmg(player.getDmg() + 25);
                        System.out.println("–í—ã –∫—É–ø–∏–ª–∏ –∑–µ–ª—å–µ —Ö–∞–π–ø–∞! –ú–æ–Ω–µ—Ç –æ—Å—Ç–∞–ª–æ—Å—å: " + player.getCoins());
                    } else {
                        System.out.println("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
                    }
                    break;

                case "0":
                    inShop = false;
                    map.displayCurrentMap(player);
                    break;

                default:
                    System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
            }
        }
    }

    private static void transitionToMap(Scanner scanner, Map map, Player player, Player.MapType targetMap, int startX, int startY) {
        System.out.println("–ü–µ—Ä–µ–π—Ç–∏? (1 - –¥–∞, 2 - –Ω–µ—Ç)");
        String choice = scanner.nextLine();
        if ("1".equals(choice)) {
            player.setCurrentMapType(targetMap);
            player.setPosition(startX, startY);
            map.displayCurrentMap(player);
        }
    }
}
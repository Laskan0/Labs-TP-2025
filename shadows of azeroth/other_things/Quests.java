package other_things;

import entities.Player;
import maps.Map;
import java.util.Scanner;

public class Quests {
    private final String firstQuestRiddle = "¬´–ë–µ–∑ –ø–ª–æ—Ç–∏, –Ω–æ –ø–æ–≤—Ç–æ—Ä—è—é —à–∞–≥,\n" +
            "–ë–µ–∑ –≥–æ–ª–æ—Å–∞, –Ω–æ –≤—Ç–æ—Ä—é —Å–º–µ—Ö.\n" +
            "–í –∑–∞–º–∫–∞—Ö –ø—É—Å—Ç—ã—Ö —è –∂–∏–≤—É –≤—Å–µ–≥–¥–∞,\n" +
            "–ö—Ç–æ —è? –¢–µ–Ω—å? –ù–µ—Ç ‚Äî —Ç–µ–Ω—å –æ—Ç —Å–≤–µ—Ç–∞ –∑–ª–∞.";
    private final String firstQuestAnswer = "—ç—Ö–æ";

    private final String secondQuestRiddle = "–û–Ω–æ –º–æ–∂–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ª—é–±–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–¥—É–º–∞–µ—Ç –Ω–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ.";
    private final String secondQuestAnswer = "–∑–µ—Ä–∫–∞–ª–æ";

    private final String thirdQuestRiddle = "–ö–∞–∫–∞—è –ø–æ—Å—É–¥–∞ –æ—Å—Ç–∞–≤–∏—Ç –≥–æ–ª–æ–¥–Ω—ã–º,\n" +
            "–í–µ–¥—å –≤–æ–≤—Å–µ –æ–Ω–∞ –¥–ª—è –µ–¥—ã –Ω–µ –ø—Ä–∏–≥–æ–¥–Ω–∞";
    private final String thirdQuestAnswer = "–ø—É—Å—Ç–∞—è";

    private final String introduction = "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –¥—Ä–µ–≤–Ω—è—è –≥—Ä–æ–±–Ω–∏—Ü–∞ –¢–∏—Ç–∞–Ω–æ–≤, –ø—Ä–æ–±–∏—Ç–∞—è –≤ –ª–µ–¥—è–Ω–æ–π —Å–∫–∞–ª–µ. –ï—ë —Ä—É–Ω—ã, –º–µ—Ä—Ü–∞—é—â–∏–µ —Å–∏–Ω–∏–º –æ–≥–Ω–µ–º, —Å–ª–æ–≤–Ω–æ –≥–ª–∞–∑–∞ –º–µ—Ä—Ç–≤–µ—Ü–æ–≤, —Ö—Ä–∞–Ω—è—Ç —Ç—Ä–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –¥—É—Ö–∞. –õ–∏—à—å —Ä–∞–∑–≥–∞–¥–∞–≤ –∏—Ö, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫–æ—Å–Ω—É—Ç—å—Å—è –∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É...";

    private int questState = 0;
    private final Scanner scanner;

    public Quests(Scanner scanner) {
        this.scanner = scanner;
    }

    public void applyTo(Quests quests) {
        if (quests != null) {
            quests.setQuestState(questState);
        }
    }



        public boolean startFirstQuest(Player player, Map map) {
            System.out.println(introduction);

            // üî• –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
            if (questState >= 3) {
                questState = 0; // –ù–∞—á–∏–Ω–∞–µ–º –∫–≤–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
            }

            while (questState < 3) {
                switch (questState) {
                    case 0:
                        if (!solveRiddle(firstQuestRiddle, firstQuestAnswer)) {
                            return false;
                        }
                        questState++;
                        break;
                    case 1:
                        if (!solveRiddle(secondQuestRiddle, secondQuestAnswer)) {
                            return false;
                        }
                        questState++;
                        break;
                    case 2:
                        if (!solveRiddle(thirdQuestRiddle, thirdQuestAnswer)) {
                            return false;
                        }
                        questState++;
                        break;
                }
            }

            System.out.println("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Ä–∞–∑–≥–∞–¥–∞–ª–∏ –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç!");
            player.setHasArtifact(true);
            return true;
        }

    private boolean solveRiddle(String riddle, String correctAnswer) {
        int attempts = 3;

        while (attempts > 0) {
            System.out.println(riddle);
            System.out.print("–í–∞—à –æ—Ç–≤–µ—Ç: ");
            String answer = scanner.nextLine().trim().toLowerCase();

            if (answer.equals(correctAnswer)) {
                System.out.println("–î—É—Ö–∏ –ø—Ä–µ–¥–∫–æ–≤ –æ–¥–æ–±—Ä—è—é—Ç —Ç–≤–æ–π –≤—ã–±–æ—Ä. –¢–≤–æ—è —á–µ—Å—Ç—å —É–∫—Ä–µ–ø–ª–µ–Ω–∞, –∫–∞–∫ —Å—Ç–∞–ª—å –î—É—Ä–æ—Ç–∞—Ä–∞.");
                return true;
            } else {
                attempts--;
                if (attempts > 0) {
                    System.out.println("–ù–µ–≤–µ—Ä–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: " + attempts);
                } else {
                    System.out.println("–¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏. –î—É—Ö–∏ –≥–Ω–µ–≤–∞—é—Ç—Å—è ‚Äî –≥–æ—Ç–æ–≤—å—Å—è –∫ –±–æ—é!");
                    return false;
                }
            }
        }
        return false;
    }

    public boolean isQuestCompleted() {
        return questState == 3; // –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –µ—Å–ª–∏ –ø—Ä–æ–π–¥–µ–Ω—ã –≤—Å–µ 3 –∑–∞–≥–∞–¥–∫–∏
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞


    // –ì–µ—Ç—Ç–µ—Ä –∏ —Å–µ—Ç—Ç–µ—Ä –¥–ª—è questState
    public int getQuestState() {
        return questState;
    }

    public void setQuestState(int questState) {
        this.questState = questState;
    }

    public void QuestsData(Quests quests) {
        if (quests != null) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null
            this.questState = quests.getQuestState();
        } else {
            this.questState = 0;
        }
    }

    
}
